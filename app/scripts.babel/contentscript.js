
  'use strict';

  // NOTE: PLEASE ONLY EDIT THE JS FILES INSIDE SCRIPTS.BABLE. OTHER SCRIPTS WITH THE SAME NAME AS IN .BABEL ARE AUTO-GENERATED
  // this page since it's a content script, it will get injected in the page
  // https://developer.chrome.com/extensions/content_scripts

  $(function(){

    const TEMPLATE_CLASS_NAME_WITH_METHOD =
          `<class name="#CLASS_NAME#">
                <methods>
                    <include name="#METHOD_NAME#" />
                </methods>
            </class>`;

    const TEMPLATE_TEST_SUITE =
`<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd">
<suite name="AutoGeneratedFailingTests" thread-count="50" parallel="methods" >

    <listeners>
        <listener class-name="main.java.pos.testng.RetryListener"/>
    </listeners>

    <test name="AutoGeneratedFailingTests" preserve-order="true"  enabled="true">

        <!--test variables given as JVM args-->
        <parameter name="envFile" value=""/>
        <parameter name="testDataFile" value=""/>
        <parameter name="browserType" value=""/>
        
        <classes>
          #FAILED_TESTS#
        </classes>
    </test>
</suite>`;

    function getDate() {
      const date = new Date();
      const year = date.getFullYear();
      const month = date.getMonth() + 1; // want a 1-12 month
      const day = date.getDate(); // 1 - 31
      const hr = date.getHours();
      const min = date.getMinutes();
      const dateString = '' + year + '-' + month + '-' + day + '-H' + hr + '-M' + min;
      return dateString;
    }

    function getFailedTests() {
      const testSelector = 'table.bigtable td a.model-link';
      const failedTest = [];
      $(testSelector).each((index, el) => {
        const parts = $(el).text().split('.');
        const test = {
          methodName: parts.pop(),
          className: parts.join('.')
        };
        failedTest.push(test);
      });
      return failedTest;
    }

    function getTestSuiteXmlContent() {
      let failedTestsXmlNodes = '';
      getFailedTests().forEach((t) => {
        let testXmlNode = TEMPLATE_CLASS_NAME_WITH_METHOD.replace('#CLASS_NAME#', t.className);
        testXmlNode = testXmlNode.replace('#METHOD_NAME#', t.methodName);
        failedTestsXmlNodes += '\n' + testXmlNode;
      });
      return TEMPLATE_TEST_SUITE.replace('#FAILED_TESTS#', failedTestsXmlNodes);
    }

    // MSG LISTENERS
    // listen to click on download event from extension icon
    chrome.runtime.onMessage.addListener(function(request, sender, sendResponse){
        if (request.action == 'downloadSeleniumTestsButton') {

            let blob = new Blob([getTestSuiteXmlContent()], {type: 'text/plain;charset=utf-8'});
            const suiteName = 'failedtests' + getDate() + '.xml';
            saveAs(blob, suiteName);

        }
    });

});

